const jwt = require('jsonwebtoken');

/**
 * Calcula la cantidad de segundos en un número dado de horas.
 * @function calcularSegundos
 * @param {number} horas - El número de horas a convertir en segundos.
 * @returns {number} La cantidad total de segundos.
 */
const calcularSegundos = function(horas) {
  return horas * 60 * 60;
};

/**
 * Genera un token de autenticación JSON Web Token (JWT).
 * @function generarToken
 * @param {string} [tokenSecret=''] - La clave secreta para firmar el token.
 * @param {number} [expiracion=6] - El tiempo de expiración del token en horas.
 * @param {object} [datosUsuario={}] - El payload de datos para incluir en el token.
 * @returns {string} El token JWT generado.
 */
const generarToken = function(tokenSecret = '', expiracion = 6, datosUsuario = {}) {
  const payload = {
    exp: Math.floor(Date.now() / 1000) + calcularSegundos(expiracion),
    data: datosUsuario
  };
  const token = jwt.sign(payload, tokenSecret);
  return token;
};

/**
 * Verifica la validez de un token JWT y decodifica su contenido.
 * @function verificarToken
 * @param {string} [token=''] - El token JWT a verificar.
 * @param {string} [tokenSecret=''] - La clave secreta con la que se firmó el token.
 * @returns {object|string} El payload del token si es válido, o un mensaje de error si no lo es.
 */
const verificarToken = function(token = '', tokenSecret = '') {
  try {
    const datosUsuario = jwt.verify(token, tokenSecret);
    return datosUsuario;
  } catch (error) {
    if (error.name === 'JsonWebTokenError') return `Error en token: ${error.message}`;
    if (error.name === 'TokenExpiredError') return `Token expirado: ${new Date(error.expiredAt * 1000)}`;
    return `Error desconocido: ${error.message}`;
  }
};

module.exports = { generarToken, verificarToken };